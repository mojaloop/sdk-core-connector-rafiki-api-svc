/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/open-payments/{ID}/{Type}/incoming-payments": {
    post: operations["OpenPaymentsIdTypeIncomingPaymentsPost"];
  };
  "/rafiki/webhook/incoming-payment": {
    post: operations["RafikiWebHookIncomingPaymentEvent"];
  };
  "/rafiki/webhook/outgoing-payment": {
    post: operations["RafikiWebHookOutgoingPaymentEvent"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * Currency 
     * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies. 
     * @enum {string}
     */
    Currency: "AED" | "AFN" | "ALL" | "AMD" | "ANG" | "AOA" | "ARS" | "AUD" | "AWG" | "AZN" | "BAM" | "BBD" | "BDT" | "BGN" | "BHD" | "BIF" | "BMD" | "BND" | "BOB" | "BRL" | "BSD" | "BTN" | "BWP" | "BYN" | "BZD" | "CAD" | "CDF" | "CHF" | "CLP" | "CNY" | "COP" | "CRC" | "CUC" | "CUP" | "CVE" | "CZK" | "DJF" | "DKK" | "DOP" | "DZD" | "EGP" | "ERN" | "ETB" | "EUR" | "FJD" | "FKP" | "GBP" | "GEL" | "GGP" | "GHS" | "GIP" | "GMD" | "GNF" | "GTQ" | "GYD" | "HKD" | "HNL" | "HRK" | "HTG" | "HUF" | "IDR" | "ILS" | "IMP" | "INR" | "IQD" | "IRR" | "ISK" | "JEP" | "JMD" | "JOD" | "JPY" | "KES" | "KGS" | "KHR" | "KMF" | "KPW" | "KRW" | "KWD" | "KYD" | "KZT" | "LAK" | "LBP" | "LKR" | "LRD" | "LSL" | "LYD" | "MAD" | "MDL" | "MGA" | "MKD" | "MMK" | "MNT" | "MOP" | "MRO" | "MUR" | "MVR" | "MWK" | "MXN" | "MYR" | "MZN" | "NAD" | "NGN" | "NIO" | "NOK" | "NPR" | "NZD" | "OMR" | "PAB" | "PEN" | "PGK" | "PHP" | "PKR" | "PLN" | "PYG" | "QAR" | "RON" | "RSD" | "RUB" | "RWF" | "SAR" | "SBD" | "SCR" | "SDG" | "SEK" | "SGD" | "SHP" | "SLL" | "SOS" | "SPL" | "SRD" | "STD" | "SVC" | "SYP" | "SZL" | "THB" | "TJS" | "TMT" | "TND" | "TOP" | "TRY" | "TTD" | "TVD" | "TWD" | "TZS" | "UAH" | "UGX" | "USD" | "UYU" | "UZS" | "VEF" | "VND" | "VUV" | "WST" | "XAF" | "XCD" | "XDR" | "XOF" | "XPF" | "XTS" | "XXX" | "YER" | "ZAR" | "ZMW" | "ZWD";
    /** Amount */
    Amount: {
      value?: number;
      assetCode?: components["schemas"]["Currency"];
      assetScale?: number;
    };
    /**
     * BulkTransfersPostRequest 
     * @description The object sent in the POST /{ID}/{Type}/incoming-payments request.
     */
    IDTypeIncomingPaymentsPostRequest: {
      incomingAmount?: components["schemas"]["Amount"];
      expiresAt: components["schemas"]["DateTime"];
      description?: string;
      externalRef: string;
    };
    /**
     * BulkTransfersPostResponse 
     * @description The object sent in the POST /{ID}/{Type}/incoming-payments response.
     */
    IDTypeIncomingPaymentsPostResponse: {
      id: string;
      paymentPointer: string;
      completed: boolean;
      receivedAmount: components["schemas"]["Amount"];
      description: string;
      createdAt: components["schemas"]["DateTime"];
      updatedAt: components["schemas"]["DateTime"];
    };
    /**
     * RafikiWebHookIncomingPaymentRequest 
     * @description Rafiki itself does not hold any balances but needs to be funded for outgoing transfers and moneyneeds to be withdrawn for incoming transfers. In order to notify the Account Servicing Entity about those transfer events, they need to expose a webhook endpoint that listens for these events and reacts accordingly. (Refer https://github.com/interledger/rafiki/blob/main/docs/integration.md#webhook-events)
     */
    RafikiWebHookIncomingPaymentRequest: {
      id?: components["schemas"]["CorrelationId"];
      /** @enum {string} */
      type?: "IncomingPaymentCompleted" | "IncomingPaymentExpired";
      data?: {
        incomingPayment?: {
          id?: string;
          paymentPointerId?: string;
          description?: string;
          incomingAmount?: components["schemas"]["Amount"];
          receivedAmount?: components["schemas"]["Amount"];
          completed?: boolean;
          externalRef?: string;
          createdAt?: components["schemas"]["DateTime"];
          updatedAt?: components["schemas"]["DateTime"];
          expiresAt?: components["schemas"]["DateTime"];
        };
      };
    };
    /**
     * RafikiWebHookIncomingPaymentCallback 
     * @description Rafiki itself does not hold any balances but needs to be funded for outgoing transfers and moneyneeds to be withdrawn for incoming transfers. In order to notify the Account Servicing Entity about those transfer events, they need to expose a webhook endpoint that listens for these events and reacts accordingly. (Refer https://github.com/interledger/rafiki/blob/main/docs/integration.md#webhook-events)
     */
    RafikiWebHookIncomingPaymentCallback: {
      code?: components["schemas"]["CorrelationId"];
      success?: string;
      /** @description Is this the ilpFulfilment? */
      message?: string;
      payment?: {
        id?: components["schemas"]["CorrelationId"];
        paymentPointerId?: string;
        state?: string;
        expiresAt?: components["schemas"]["DateTime"];
        stateAttempts?: number;
        sendAmount?: components["schemas"]["Amount"];
        receiveAmount?: components["schemas"]["Amount"];
        externalref?: components["schemas"]["CorrelationId"];
        sentAmount?: components["schemas"]["Amount"];
        createdAt?: components["schemas"]["DateTime"];
      };
    };
    /**
     * RafikiWebHookOutgoingPaymentRequest 
     * @description Rafiki itself does not hold any balances but needs to be funded for outgoing transfers and moneyneeds to be withdrawn for incoming transfers. In order to notify the Account Servicing Entity about those transfer events, they need to expose a webhook endpoint that listens for these events and reacts accordingly. (Refer https://github.com/interledger/rafiki/blob/main/docs/integration.md#webhook-events)
     */
    RafikiWebHookOutgoingPaymentRequest: {
      id?: components["schemas"]["CorrelationId"];
      /** @enum {string} */
      type?: "OutgoingPaymentCreated" | "OutgoingPaymentCompleted" | "OutgoingPaymentFailed";
      data?: {
        payment?: {
          id?: string;
          paymentPointerId?: string;
          description?: string;
          receiver?: string;
          sendAmount?: components["schemas"]["Amount"];
          receiveAmount?: components["schemas"]["Amount"];
          completed?: boolean;
          externalRef?: string;
          sentAmount?: components["schemas"]["Amount"];
          /** @enum {string} */
          state?: "FUNDING" | "SENDING" | "FAILED" | "COMPLETED";
          createdAt?: components["schemas"]["DateTime"];
          updatedAt?: components["schemas"]["DateTime"];
        };
      };
    };
    /**
     * DateTime 
     * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC). 
     * @example 2016-05-24T08:38:08.699-04:00
     */
    DateTime: string;
    /** QuoteResponse */
    QuoteResponse: {
      code?: components["schemas"]["CorrelationId"];
      success?: boolean;
      message?: {
        name?: string;
      };
      quote?: components["schemas"]["Quote"];
    };
    /** Quote */
    Quote: {
      id?: components["schemas"]["CorrelationId"];
      paymentPointerId?: string;
      receiver?: string;
      sendAmount?: components["schemas"]["Amount"];
      receiveAmount?: components["schemas"]["Amount"];
      maxPacketAmount?: number;
      /** Format: float */
      minExchangeRate?: number;
      /** Format: float */
      lowEstimatedExchangeRate?: number;
      /** Format: float */
      highEstimatedExchangeRate?: number;
      createdAt?: components["schemas"]["DateTime"];
      updatedAt?: components["schemas"]["DateTime"];
    };
    /**
     * CorrelationId 
     * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘). 
     * @example b51ec534-ee48-4575-b6a9-ead2955b8069
     */
    CorrelationId: string;
  };
  responses: {
    /** @description OK */
    200: never;
    /** @description Not Found */
    404: never;
    /** @description Service Unavailable */
    503: never;
  };
  parameters: {
    /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
    Type: string;
    /** @description The identifier value. */
    ID: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  OpenPaymentsIdTypeIncomingPaymentsPost: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["IDTypeIncomingPaymentsPostRequest"];
      };
    };
    responses: {
      default: {
        content: {
          "application/json": components["schemas"]["IDTypeIncomingPaymentsPostResponse"];
        };
      };
    };
  };
  RafikiWebHookIncomingPaymentEvent: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["RafikiWebHookIncomingPaymentRequest"];
      };
    };
    responses: {
      200: components["responses"]["200"];
      404: components["responses"]["404"];
      503: components["responses"]["503"];
    };
  };
  RafikiWebHookOutgoingPaymentEvent: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["RafikiWebHookOutgoingPaymentRequest"];
      };
    };
    responses: {
      200: components["responses"]["200"];
      404: components["responses"]["404"];
      503: components["responses"]["503"];
    };
  };
}
